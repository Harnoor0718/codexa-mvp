generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int              @id @default(autoincrement())
  username           String           @unique
  email              String           @unique
  password           String
  fullName           String?
  isAdmin            Boolean          @default(false)
  isEmailVerified    Boolean          @default(false)
  emailVerifyToken   String?          @unique
  createdAt          DateTime         @default(now())
  problemsSolved     Int              @default(0)
  currentStreak      Int              @default(0)
  longestStreak      Int              @default(0)
  lastSolvedDate     DateTime?
  submissions        Submission[]
  discussions        Discussion[]
  passwordResets     PasswordReset[]
}

model Problem {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  title       String
  description String
  difficulty  String
  timeLimit   Int          @default(1000)
  memoryLimit Int          @default(256)
  tags        String
  createdAt   DateTime     @default(now())
  isPublished Boolean      @default(false)
  testCases   TestCase[]
  submissions Submission[]
  discussions Discussion[]
}

model TestCase {
  id             Int     @id @default(autoincrement())
  problemId      Int
  input          String
  expectedOutput String
  isSample       Boolean @default(false)
  problem        Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Submission {
  id          Int      @id @default(autoincrement())
  userId      Int
  problemId   Int
  code        String
  language    String
  status      String
  runtime     Int?
  memory      Int?
  submittedAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  problem     Problem  @relation(fields: [problemId], references: [id])
}

model Discussion {
  id          Int      @id @default(autoincrement())
  problemId   Int
  userId      Int
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  problem     Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}